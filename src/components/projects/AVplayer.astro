---
let isExpanded = false; // Track whether the text is expanded
let title = "SmartThings Camera Plugin";
---

<article class="p-5 rounded-xl border border-gray-200 bg-white hover:shadow-md transition cursor-pointer">
    <h3 class="text-xl font-semibold mb-2 text-gray-800">AVplayer [SmartThings Camera Plugin]</h3>
    <!-- Wrapper for the Description and Details -->
    <div 
      id="description-avp" 
      class={`text-gray-600 mb-4 ${isExpanded ? 'expanded' : 'collapsed'}`}
      data-title="avp">
      
      <!-- Description with clamping -->
      <p id="description-avp-text" class="mb-4">
        <span class="font-semibold">Role:</span> Full Stack Developer
      </p>
      
      <!-- Details with clamping -->
      <p id="details-avp">
        <ul>
          <li><strong>Technologies:</strong> UWP | WPF | WinUI 3 | WinRT | .NET Framework | Gstreamer | WebRTC</li>
          <li><strong>Responsibilities:</strong>
            <ul class="list-disc ml-5">
              <li>Developed a plugin for connecting and streaming media from smart home cameras using UWP, WPF, WinUI 3, and WinRT technologies.</li>
              <li>Utilized <span class="font-semibold">WebRTC</span> and <span class="font-semibold">GStreamer</span> to establish low-latency, high-quality video and audio streaming between devices.</li>
              <li>Created a <span class="font-semibold">static library</span> to interface with camera hardware, handle media streaming, and ensure seamless integration with other components of the smart home ecosystem.</li>
              <li>Reduced <span class="font-semibold">memory usage</span> by approximately <span class="font-semibold">500MB</span>, optimizing system performance and reducing resource consumption.</li>
              <li>Enabled streaming from <span class="font-semibold">4 cameras simultaneously</span>, improving the scalability and functionality of the system.</li>
              <li>Successfully resolved SQE (Software Quality Engineering) issues, ensuring a bug-free release.</li>
            </ul>
          </li>
        </ul>
      </p>
    </div>

  <!-- See More button is shown only when text is clamped -->
  <button 
    class={`text-blue-500 font-semibold mt-2 ${isExpanded ? 'hidden' : ''}`}
    id="seeMoreButton-avp"
    data-title={title}>
    See More
  </button>

  <!-- See Less button is shown when text is expanded -->
  <button 
    class={`text-blue-500 font-semibold mt-2 ${isExpanded ? '' : 'hidden'}`}
    id="toggleButton-avp"
    data-title={title}>
    See Less
  </button>
</article>

<script type="module" client:load>
    document.addEventListener('DOMContentLoaded', () => {
      let isClamped = false; // Track if text is overflowing (clamped)
      let isExpanded = false; // Track if the text is expanded
      
      const toggleButtons = document.querySelectorAll('button[data-title]');
      const seeMoreButtons = document.querySelectorAll('button[id^="seeMoreButton-"]');

      toggleButtons.forEach((button) => {
        const title = button.getAttribute('data-title');
        const description = document.getElementById('description-avp');
        const details = document.getElementById('details-avp');
        const toggleButton = button;
        const seeMoreButton = document.getElementById('seeMoreButton-avp');
        const seeLessButton = document.getElementById('toggleButton-avp');

        // Function to check if the text is overflowing
        function checkTextOverflow() {
          if (description.scrollHeight > description.clientHeight || details.scrollHeight > details.clientHeight) {
            seeMoreButton.classList.remove('hidden');
            isClamped = true;
          } else {
            seeMoreButton.classList.add('hidden');
            isClamped = false;
          }
        }

        // Check if the text is overflowing when page loads
        checkTextOverflow();

        // Recheck on window resize (optional)
        window.addEventListener('resize', checkTextOverflow);

        // Event listener for toggling the expansion
        seeMoreButton.addEventListener('click', () => {
          isExpanded = true;
          description.classList.add('expanded');
          description.classList.remove('collapsed');
          seeMoreButton.classList.add('hidden');
          seeLessButton.classList.remove('hidden');
        });

        seeLessButton.addEventListener('click', () => {
          isExpanded = false;
          description.classList.add('collapsed');
          description.classList.remove('expanded');
          seeLessButton.classList.add('hidden');
          seeMoreButton.classList.remove('hidden');
        });
      });
    });
</script>

<style>
  /* Collapse the text with max-height and overflow hidden */
  .collapsed {
    max-height: 5.25em; /* Adjust this to the height of 3 lines of text */
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }

  /* Fully expand the text */
  .expanded {
    max-height: none; /* No limit on height when expanded */
    transition: max-height 0.3s ease-in;
  }
</style>
